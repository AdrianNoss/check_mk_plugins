#!/usr/bin/env python3
# Twilio Voice call with TwiML syntax
# https://github.com/davidedg/check_mk_plugins
__author__ = 'DavideDG'
__version__ = '2.0.0'

import os, sys, re, json
from cmk.notification_plugins import utils
from cmk.notification_plugins.utils import retrieve_from_passwordstore
from twilio.rest import Client as TwilioRESTClient


opt_debug = '-d' in sys.argv
if opt_debug: import pprint

########################################################################################################
def twilioVoiceCall(account_sid, auth_token, phone_from, phone_to, **kwargs):
########################################################################################################
# https://www.twilio.com/docs/voice/make-calls?code-sample=code-make-an-outbound-call-to-a-phone-number&code-language=Node.js&code-sdk-version=3.x#linkcode
    try:
        twilioclient = TwilioRESTClient(account_sid, auth_token)
        return twilioclient.calls.create(
            from_=phone_from,
            to=phone_to,
            **kwargs
        )

    except Exception as e:
        sys.stderr.write("%s" % e)
        sys.exit(1)



########################################################################################################
def get_twilio_credentials(param_credentials):
########################################################################################################
# PARAMETER_CREDENTIALS can be in one of the following formats:
# u'plain\tACCOUNT_SID:AUTH_TOKEN' -> colon concatenated credentials in plain text, ie: ACCOUNT_SID:AUTH_KEY
# u'env'                           -> credentials must be fetched from env vars "TWILIO_ACCOUNT_SID" and "TWILIO_AUTH_TOKEN"
# u'jsonstore\tprofile1'           -> a single word, representing a profile name in a json-formatted configuration file in ~/.twilio.secrets
# u'store\tcmk_store_name'         -> colon concatenated credentials to be retrieved from CMK password store

    v = param_credentials.split()
    if opt_debug: sys.stderr.write("%s" % pprint.pprint(v))

    if len(v) == 2: # plain / jsonstore / store
        if v[0] == 'plain':
            return v[1].split(':')
        elif v[0] == 'store':
            z = retrieve_from_passwordstore(param_credentials)
            return z.split(':')
        elif v[0] == 'jsonstore': ## lookup profile in ~/.twilio.secrets
            # get Check_MK root directory
            HOMEDIR = os.getenv('HOME','~')
            HOMEDIR = os.getenv('OMD_ROOT',HOMEDIR)
            TWILIOSECRETSFILEPATH = os.path.join(HOMEDIR, '.twilio.secrets')
            if opt_debug: sys.stderr.write("%s" % pprint.pprint(TWILIOSECRETSFILEPATH))
            try:
                with open(TWILIOSECRETSFILEPATH) as twiliosecrets_json_file:
                    twilio_secrets_json = json.load(twiliosecrets_json_file)
                    if opt_debug: sys.stderr.write("%s" % pprint.pprint(twilio_secrets_json))
                return twilio_secrets_json[v[1]]['account_sid'],twilio_secrets_json[v[1]]['auth_token']
            except Exception as e:
                sys.stderr.write('Error loading from twilio secrets file!\n')
                sys.stderr.write("%s" % e)
                sys.exit(1)

        else:
            sys.stderr.write('Error (fatal) unexpected condition!\n')
            sys.exit(1)
    elif len(v) == 1 and v[0] == 'env':
        return os.environ['TWILIO_ACCOUNT_SID'],os.environ['TWILIO_AUTH_TOKEN']
    else:
        sys.stderr.write('Error (fatal) unexpected condition!\n')
        sys.exit(1)


#######################################################################################################
def main():
########################################################################################################

    # GET CONFIGURATION FROM ENVIRONMENT VARIABLES
    context = utils.collect_context()
    if opt_debug: sys.stderr.write("%s" % pprint.pprint(context))


    # VALIDATE RECIPIENT (PAGER ADDRESS)
    if not context.get("CONTACTPAGER"):
        sys.stderr.write('Error: No telephone number for the contact!\n')
        sys.exit(1)

    phone_to = utils.substitute_context(context.get("CONTACTPAGER"),context)
    if opt_debug: sys.stderr.write("%s" % pprint.pprint(phone_to))



    # VALIDATE SOURCE NUMBER
    if context.get("PARAMETER_SOURCE_PHONE","none") == "none":
        sys.stderr.write('Error: Missing Source Phone Number!\n')
        sys.exit(1)

    phone_from = utils.substitute_context(context.get("PARAMETER_SOURCE_PHONE"),context)
    if opt_debug: sys.stderr.write("%s" % pprint.pprint(phone_from))



    # GET TWILIO CREDENTIALS
    account_sid, auth_token = get_twilio_credentials(context.get('PARAMETER_CREDENTIALS'))
    if not (account_sid and auth_token):
        sys.stderr.write('Error: Missing Credentials!\n')
        sys.exit(1)
    account_sid = utils.substitute_context(account_sid,context)
    auth_token = utils.substitute_context(auth_token,context)

    if opt_debug: sys.stderr.write("%s" % pprint.pprint(account_sid))
    if opt_debug: sys.stderr.write("%s" % pprint.pprint(auth_token))


    # GET TWILIO PARAMETERS
    params_string = context.get("PARAMETER_TWILIO_PARAMS","none")
    if params_string == "none":
        sys.stderr.write('Error: Missing Twilio Request Parameters!\n')
        sys.exit(1)
    params_string = utils.substitute_context(params_string,context)


    params = dict([ p.split('=') for p in params_string.splitlines() ])
    # Original:         "record=false\nurl='http://demo.twilio.com/docs/voice.xml'"
    # Inside Split:     ['record=false', "url='http://demo.twilio.com/docs/voice.xml'"]
    # List Comp. Split: [['record', 'false'], ['url', "'http://demo.twilio.com/docs/voice.xml'"]]
    # Dict:             {'record': 'false', 'url': "'http://demo.twilio.com/docs/voice.xml'"}
    if opt_debug: sys.stderr.write("%s" % pprint.pprint(params))


    # MAKE VOICE CALL
    if not opt_debug: twilioVoiceCall(account_sid, auth_token, phone_from, phone_to, **params)


if __name__ == '__main__':
    sys.exit(main())
