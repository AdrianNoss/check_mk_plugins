#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.

# v1.0 - initial release:
# Author: Davide Del Grande <davide.delgrande _ lanewan.it> / <delgrande.davide _ gmail.com>
# Based on original apc_inrow_* plugin in Check_MK 1.2.8p13
# This plugin supports APC InRow Gen2 RD, which has different OIDs
# http://www.oidview.com/mibs/318/PowerNet-MIB.html
# v1.1 - update for check_mk 2.x
# Author: Adrian Noss <dadrian.noss@gmail.com>

# .1.3.6.1.4.1.318.1.1.13.4.5.2.1.7  -->  PowerNet-MIB::airIRRG2RDT2StatusRackInletTempMetric.0
# .1.3.6.1.4.1.318.1.1.13.4.5.2.1.9  -->  PowerNet-MIB::airIRRG2RDT2StatusSupplyAirTempMetric.0
# .1.3.6.1.4.1.318.1.1.13.4.5.2.1.11 -->  PowerNet-MIB::airIRRG2RDT2StatusReturnAirTempMetric.0
# .1.3.6.1.4.1.318.1.1.13.4.5.2.1.13 -->  PowerNet-MIB::airIRRG2RDT2StatusSuctionTempMetric.0

from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

factory_settings["apc_inrow_temp_default_levels"] = {"levels": (30, 35)}

def parse_apc_inrowg2rd_temp(info):
   parsed = {}
   if info:
        for what, what_item in zip(
            info[0], ["Rack Inlet", "Supply Air", "Return Air"]
        ):
            if what not in ["", "-1"]:
                parsed.setdefault(what_item, float(what) / 10)
   return parsed


def inventory_apc_inrowg2rd_temp(parsed):
    for key in parsed:
        yield key, {}


def check_apc_inrowg2rd_temp(item, params, parsed):
    if item in parsed:
        return check_temperature(parsed[item], params, "apc_inrowg2rd_temp_%s" % item)


check_info["apc_inrowg2rd_temp"] = {
    "parse_function"          : parse_apc_inrowg2rd_temp,
    "inventory_function"      : inventory_apc_inrowg2rd_temp,
    "check_function"          : check_apc_inrowg2rd_temp,
    "service_description": "Temperature %s",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.318.1.1.13.4.5.2.1",
        [
            "7",  # airIRRCUnitStatusRackInletTempMetric
            "9",  # airIRRCUnitStatusSupplyAirTempMetric
            "11",  # airIRRCUnitStatusReturnAirTempMetric
        ],
    ),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3.14.8"),
    "group"                   : "temperature",
    "default_levels_variable" : "apc_inrowrg2rd_temp_default_levels"
}
