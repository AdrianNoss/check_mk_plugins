#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# v1.0 - initial release:
# Author: Davide Del Grande <davide.delgrande _ lanewan.it> / <delgrande.davide _ gmail.com>
# Based on original apc_inrow_* plugin in Check_MK 1.2.8p13
# This plugin supports APC InRow Gen2 RD, which has different OIDs
# http://www.oidview.com/mibs/318/PowerNet-MIB.html
# v1.1 - update for check_mk 2.x
# Author: Adrian Noss <dadrian.noss@gmail.com>

# Air Flow threasholds lowered because of normal operation in full winter in temperature-controlled datacenter with these values:
# Cool Output:  3.4 kW Cool Demand:  3.4 kW Rack Inlet Temperature:  21.2 째C Supply Air Temperature:  19.2 째C Return Air Temperature:  21.6 째C Suction Temperature:  20.4 째C Air Flow:  307/100 L/s Fan Speed:  29.6 % 

apc_inrowg2rd_airflow_default_levels = {
    "level_low" :  (  2.0 , 1.0 ),
    "level_high" : ( 10.0, 11.0 ),
}


def inventory_apc_inrowg2rd_airflow(info):
    if info:
        return [ (None, "apc_inrowg2rd_airflow_default_levels")]


def check_apc_inrowg2rd_airflow(_no_item, params, info):
    flow = saveint(info[0][0])/100.0
    state = 0
    message = ""

    warn, crit = params['level_low']
    if flow < crit:
        state = 2
        message = "too low"
    elif flow < warn:
        state = 1
        message = "too low"

    warn, crit =  params['level_high']
    if flow >= crit:
        state = 2
        message = "too high"
    elif flow >= warn:
        state = 1
        message = "too high"

    perf = [ ("flow", flow, warn, crit ) ]
    return state, "%.0fl/s %s" % ( flow, message ), perf


check_info["apc_inrowg2rd_airflow"] = {
    "check_function"          : check_apc_inrowg2rd_airflow,
    "inventory_function"      : inventory_apc_inrowg2rd_airflow,
    "service_description"     : "Airflow",
    "snmp_info"               : (".1.3.6.1.4.1.318.1.1.13.4.5.2.1", [
                                    "5",        # airIRRG2RDT2StatusAirFlowMetric  (1/100 l/s)
                                ]),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3.14.8"),
    "group"                 : "airflow",
    "has_perfdata"          : True,
}
